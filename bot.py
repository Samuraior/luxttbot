import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import os

TOKEN = os.getenv("TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

bot = telebot.TeleBot(TOKEN)

post_text = ""
sponsors = []
join_button = {"text": "üöÄ –í—Å—Ç—É–ø–∏—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥—É", "url": "https://t.me/your_join_link"}

def create_keyboard():
    keyboard = InlineKeyboardMarkup()
    for s in sponsors:
        keyboard.add(InlineKeyboardButton(s['text'], url=s['url']))
    keyboard.add(InlineKeyboardButton(join_button["text"], callback_data="join_team"))
    return keyboard

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! ü§ñ –Ø –±–æ—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤. –û–±–µ—Ä–∏ –¥—ñ—é:")
    show_menu(message.chat.id)

def show_menu(chat_id):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('‚ûï –î–æ–¥–∞—Ç–∏ —Å–ø–æ–Ω—Å–æ—Ä–∞', '‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–∫—Å—Ç')
    markup.row('üëÅ –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥', 'üì¢ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–æ—Å—Ç')
    bot.send_message(chat_id, "–ú–µ–Ω—é:", reply_markup=markup)

@bot.message_handler(func=lambda m: True)
def handle_text(message):
    global post_text
    if message.text == '‚ûï –î–æ–¥–∞—Ç–∏ —Å–ø–æ–Ω—Å–æ—Ä–∞':
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –∫–æ–º—É:")
        bot.register_next_step_handler(message, add_sponsor)
    elif message.text == '‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–∫—Å—Ç':
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç—É:")
        bot.register_next_step_handler(message, change_post_text)
    elif message.text == 'üëÅ –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥':
        bot.send_message(message.chat.id, post_text or "‚õîÔ∏è –¢–µ–∫—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π", reply_markup=create_keyboard())
    elif message.text == 'üì¢ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–æ—Å—Ç':
        bot.send_message(CHANNEL_ID, post_text or "‚õîÔ∏è –¢–µ–∫—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π", reply_markup=create_keyboard())
        bot.send_message(message.chat.id, "‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥—É –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ.")
        show_menu(message.chat.id)

def add_sponsor(message):
    try:
        text, url = map(str.strip, message.text.split(',', 1))
        sponsors.append({"text": text, "url": url})
        bot.send_message(message.chat.id, f"‚úÖ –î–æ–¥–∞–Ω–æ —Å–ø–æ–Ω—Å–æ—Ä–∞: {text}")
    except:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–º–∏–ª–∫–∞. –§–æ—Ä–º–∞—Ç: –¢–µ–∫—Å—Ç, https://...")
    show_menu(message.chat.id)

def change_post_text(message):
    global post_text
    post_text = message.text
    bot.send_message(message.chat.id, "‚úÖ –¢–µ–∫—Å—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    show_menu(message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data == "join_team")
def check_subscription(call):
    user_id = call.from_user.id
    all_subscribed = True
    for s in sponsors:
        try:
            channel = s['url'].split("/")[-1]
            member = bot.get_chat_member(f"@{channel}", user_id)
            if member.status in ['left', 'kicked']:
                all_subscribed = False
                break
        except:
            all_subscribed = False
            break
    if all_subscribed:
        bot.send_message(user_id, f"üéâ –î—è–∫—É—é! –¢–µ–ø–µ—Ä —Ç–∏ –≤ –∫–æ–º–∞–Ω–¥—ñ.")
        bot.answer_callback_query(call.id, "‚úÖ –î–æ—Å—Ç—É–ø –≤—ñ–¥–∫—Ä–∏—Ç–æ.")
    else:
        bot.answer_callback_query(call.id, "üîí –ü—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å—ñ –∫–∞–Ω–∞–ª–∏!")

bot.infinity_polling()
